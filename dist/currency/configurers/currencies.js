import SQL from "sql-template-strings";
import { db } from "../../startup/db.js";
import { does_currency_exist } from "../operations/does_currency_exist.js";
export async function configure_currency(currency_name, transferrable, message_auto_give, boost_auto_give, can_be_negative) {
    let current_settings = await get_currency_config(currency_name);
    let new_transferrable = transferrable ?? current_settings.transferrable;
    let new_message_auto_give = message_auto_give ?? current_settings.message_auto_give;
    let new_boost_auto_give = boost_auto_give ?? current_settings.boost_auto_give;
    let new_can_be_negative = can_be_negative ?? current_settings.can_be_negative;
    await db.run(SQL `UPDATE currency_config 
          SET transferrable = ${new_transferrable}, 
              message_auto_give = ${new_message_auto_give}, 
              boost_auto_give = ${new_boost_auto_give},
              can_be_negative = ${new_can_be_negative}
          WHERE currency_id = ${currency_name}`);
}
export async function get_currency_config(currency_name) {
    await error_if_doesnt_exist(currency_name);
    const result = await db.get(SQL `SELECT * FROM currency_config WHERE currency_id = ${currency_name}`);
    if (!result) {
        throw new Error(`No currency config found for currency: ${currency_name}`);
    }
    return result;
}
export async function create_currency(currency_name) {
    await error_if_exists(currency_name);
    await db.run(SQL `INSERT INTO currency_config (currency_id, can_be_deleted) VALUES (${currency_name}, true)`);
}
export async function delete_currency(currency_name) {
    await error_if_doesnt_exist(currency_name);
    const can_be_deleted = (await get_currency_config(currency_name))
        .can_be_deleted;
    if (!can_be_deleted)
        throw new Error("This currency cannot be deleted (it has been specified as default in this instance of Star's configuration)");
    await db.run(SQL `DELETE FROM currency_config WHERE currency_id = ${currency_name}`);
    await db.run(SQL `DELETE FROM user_currencies WHERE currency_id = ${currency_name}`);
    await db.run(SQL `DELETE FROM store_items WHERE currency_required = ${currency_name}`);
    await db.run(SQL `DELETE FROM store_items WHERE currency_to_give = ${currency_name}`);
}
async function error_if_exists(currency_name) {
    if (await does_currency_exist(currency_name))
        throw new Error("Currency already exists");
}
async function error_if_doesnt_exist(currency_name) {
    if (!(await does_currency_exist(currency_name)))
        throw new Error("Currency does not exist");
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VycmVuY2llcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jdXJyZW5jeS9jb25maWd1cmVycy9jdXJyZW5jaWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sR0FBRyxNQUFNLHNCQUFzQixDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN6QyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQVczRSxNQUFNLENBQUMsS0FBSyxVQUFVLGtCQUFrQixDQUN0QyxhQUFxQixFQUNyQixhQUFzQixFQUN0QixpQkFBeUIsRUFDekIsZUFBdUIsRUFDdkIsZUFBd0I7SUFFeEIsSUFBSSxnQkFBZ0IsR0FBRyxNQUFNLG1CQUFtQixDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ2hFLElBQUksaUJBQWlCLEdBQUcsYUFBYSxJQUFJLGdCQUFnQixDQUFDLGFBQWEsQ0FBQztJQUN4RSxJQUFJLHFCQUFxQixHQUN2QixpQkFBaUIsSUFBSSxnQkFBZ0IsQ0FBQyxpQkFBaUIsQ0FBQztJQUMxRCxJQUFJLG1CQUFtQixHQUFHLGVBQWUsSUFBSSxnQkFBZ0IsQ0FBQyxlQUFlLENBQUM7SUFDOUUsSUFBSSxtQkFBbUIsR0FBRyxlQUFlLElBQUksZ0JBQWdCLENBQUMsZUFBZSxDQUFDO0lBQzlFLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FDVixHQUFHLENBQUE7Z0NBQ3lCLGlCQUFpQjtvQ0FDYixxQkFBcUI7a0NBQ3ZCLG1CQUFtQjtrQ0FDbkIsbUJBQW1CO2dDQUNyQixhQUFhLEVBQUUsQ0FDNUMsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLG1CQUFtQixDQUN2QyxhQUFxQjtJQUVyQixNQUFNLHFCQUFxQixDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQzNDLE1BQU0sTUFBTSxHQUFHLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FDekIsR0FBRyxDQUFBLHFEQUFxRCxhQUFhLEVBQUUsQ0FDeEUsQ0FBQztJQUNGLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNaLE1BQU0sSUFBSSxLQUFLLENBQUMsMENBQTBDLGFBQWEsRUFBRSxDQUFDLENBQUM7SUFDN0UsQ0FBQztJQUNELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLGVBQWUsQ0FBQyxhQUFxQjtJQUN6RCxNQUFNLGVBQWUsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNyQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQ1YsR0FBRyxDQUFBLHFFQUFxRSxhQUFhLFNBQVMsQ0FDL0YsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLGVBQWUsQ0FBQyxhQUFxQjtJQUN6RCxNQUFNLHFCQUFxQixDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQzNDLE1BQU0sY0FBYyxHQUFHLENBQUMsTUFBTSxtQkFBbUIsQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUM5RCxjQUFjLENBQUM7SUFDbEIsSUFBSSxDQUFDLGNBQWM7UUFDakIsTUFBTSxJQUFJLEtBQUssQ0FDYiw2R0FBNkcsQ0FDOUcsQ0FBQztJQUNKLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FDVixHQUFHLENBQUEsbURBQW1ELGFBQWEsRUFBRSxDQUN0RSxDQUFDO0lBQ0YsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUNWLEdBQUcsQ0FBQSxtREFBbUQsYUFBYSxFQUFFLENBQ3RFLENBQUM7SUFDRixNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQ1YsR0FBRyxDQUFBLHFEQUFxRCxhQUFhLEVBQUUsQ0FDeEUsQ0FBQztJQUNGLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FDVixHQUFHLENBQUEsb0RBQW9ELGFBQWEsRUFBRSxDQUN2RSxDQUFDO0FBQ0osQ0FBQztBQUVELEtBQUssVUFBVSxlQUFlLENBQUMsYUFBcUI7SUFDbEQsSUFBSSxNQUFNLG1CQUFtQixDQUFDLGFBQWEsQ0FBQztRQUMxQyxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7QUFDL0MsQ0FBQztBQUVELEtBQUssVUFBVSxxQkFBcUIsQ0FBQyxhQUFxQjtJQUN4RCxJQUFJLENBQUMsQ0FBQyxNQUFNLG1CQUFtQixDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzdDLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztBQUMvQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFNRTCBmcm9tIFwic3FsLXRlbXBsYXRlLXN0cmluZ3NcIjtcclxuaW1wb3J0IHsgZGIgfSBmcm9tIFwiLi4vLi4vc3RhcnR1cC9kYi5qc1wiO1xyXG5pbXBvcnQgeyBkb2VzX2N1cnJlbmN5X2V4aXN0IH0gZnJvbSBcIi4uL29wZXJhdGlvbnMvZG9lc19jdXJyZW5jeV9leGlzdC5qc1wiO1xyXG5cclxuaW50ZXJmYWNlIEN1cnJlbmN5Q29uZmlnIHtcclxuICBjdXJyZW5jeV9uYW1lOiBzdHJpbmc7XHJcbiAgdHJhbnNmZXJyYWJsZTogYm9vbGVhbjtcclxuICBtZXNzYWdlX2F1dG9fZ2l2ZTogbnVtYmVyO1xyXG4gIGJvb3N0X2F1dG9fZ2l2ZTogbnVtYmVyO1xyXG4gIGNhbl9iZV9uZWdhdGl2ZTogYm9vbGVhbjtcclxuICBjYW5fYmVfZGVsZXRlZDogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNvbmZpZ3VyZV9jdXJyZW5jeShcclxuICBjdXJyZW5jeV9uYW1lOiBzdHJpbmcsXHJcbiAgdHJhbnNmZXJyYWJsZTogYm9vbGVhbixcclxuICBtZXNzYWdlX2F1dG9fZ2l2ZTogbnVtYmVyLFxyXG4gIGJvb3N0X2F1dG9fZ2l2ZTogbnVtYmVyLFxyXG4gIGNhbl9iZV9uZWdhdGl2ZTogYm9vbGVhblxyXG4pOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgY3VycmVudF9zZXR0aW5ncyA9IGF3YWl0IGdldF9jdXJyZW5jeV9jb25maWcoY3VycmVuY3lfbmFtZSk7XHJcbiAgbGV0IG5ld190cmFuc2ZlcnJhYmxlID0gdHJhbnNmZXJyYWJsZSA/PyBjdXJyZW50X3NldHRpbmdzLnRyYW5zZmVycmFibGU7XHJcbiAgbGV0IG5ld19tZXNzYWdlX2F1dG9fZ2l2ZSA9XHJcbiAgICBtZXNzYWdlX2F1dG9fZ2l2ZSA/PyBjdXJyZW50X3NldHRpbmdzLm1lc3NhZ2VfYXV0b19naXZlO1xyXG4gIGxldCBuZXdfYm9vc3RfYXV0b19naXZlID0gYm9vc3RfYXV0b19naXZlID8/IGN1cnJlbnRfc2V0dGluZ3MuYm9vc3RfYXV0b19naXZlO1xyXG4gIGxldCBuZXdfY2FuX2JlX25lZ2F0aXZlID0gY2FuX2JlX25lZ2F0aXZlID8/IGN1cnJlbnRfc2V0dGluZ3MuY2FuX2JlX25lZ2F0aXZlO1xyXG4gIGF3YWl0IGRiLnJ1bihcclxuICAgIFNRTGBVUERBVEUgY3VycmVuY3lfY29uZmlnIFxyXG4gICAgICAgICAgU0VUIHRyYW5zZmVycmFibGUgPSAke25ld190cmFuc2ZlcnJhYmxlfSwgXHJcbiAgICAgICAgICAgICAgbWVzc2FnZV9hdXRvX2dpdmUgPSAke25ld19tZXNzYWdlX2F1dG9fZ2l2ZX0sIFxyXG4gICAgICAgICAgICAgIGJvb3N0X2F1dG9fZ2l2ZSA9ICR7bmV3X2Jvb3N0X2F1dG9fZ2l2ZX0sXHJcbiAgICAgICAgICAgICAgY2FuX2JlX25lZ2F0aXZlID0gJHtuZXdfY2FuX2JlX25lZ2F0aXZlfVxyXG4gICAgICAgICAgV0hFUkUgY3VycmVuY3lfaWQgPSAke2N1cnJlbmN5X25hbWV9YFxyXG4gICk7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRfY3VycmVuY3lfY29uZmlnKFxyXG4gIGN1cnJlbmN5X25hbWU6IHN0cmluZ1xyXG4pOiBQcm9taXNlPEN1cnJlbmN5Q29uZmlnPiB7XHJcbiAgYXdhaXQgZXJyb3JfaWZfZG9lc250X2V4aXN0KGN1cnJlbmN5X25hbWUpO1xyXG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGRiLmdldChcclxuICAgIFNRTGBTRUxFQ1QgKiBGUk9NIGN1cnJlbmN5X2NvbmZpZyBXSEVSRSBjdXJyZW5jeV9pZCA9ICR7Y3VycmVuY3lfbmFtZX1gXHJcbiAgKTtcclxuICBpZiAoIXJlc3VsdCkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKGBObyBjdXJyZW5jeSBjb25maWcgZm91bmQgZm9yIGN1cnJlbmN5OiAke2N1cnJlbmN5X25hbWV9YCk7XHJcbiAgfVxyXG4gIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVfY3VycmVuY3koY3VycmVuY3lfbmFtZTogc3RyaW5nKSB7XHJcbiAgYXdhaXQgZXJyb3JfaWZfZXhpc3RzKGN1cnJlbmN5X25hbWUpO1xyXG4gIGF3YWl0IGRiLnJ1bihcclxuICAgIFNRTGBJTlNFUlQgSU5UTyBjdXJyZW5jeV9jb25maWcgKGN1cnJlbmN5X2lkLCBjYW5fYmVfZGVsZXRlZCkgVkFMVUVTICgke2N1cnJlbmN5X25hbWV9LCB0cnVlKWBcclxuICApO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGVsZXRlX2N1cnJlbmN5KGN1cnJlbmN5X25hbWU6IHN0cmluZykge1xyXG4gIGF3YWl0IGVycm9yX2lmX2RvZXNudF9leGlzdChjdXJyZW5jeV9uYW1lKTtcclxuICBjb25zdCBjYW5fYmVfZGVsZXRlZCA9IChhd2FpdCBnZXRfY3VycmVuY3lfY29uZmlnKGN1cnJlbmN5X25hbWUpKVxyXG4gICAgLmNhbl9iZV9kZWxldGVkO1xyXG4gIGlmICghY2FuX2JlX2RlbGV0ZWQpXHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgIFwiVGhpcyBjdXJyZW5jeSBjYW5ub3QgYmUgZGVsZXRlZCAoaXQgaGFzIGJlZW4gc3BlY2lmaWVkIGFzIGRlZmF1bHQgaW4gdGhpcyBpbnN0YW5jZSBvZiBTdGFyJ3MgY29uZmlndXJhdGlvbilcIlxyXG4gICAgKTtcclxuICBhd2FpdCBkYi5ydW4oXHJcbiAgICBTUUxgREVMRVRFIEZST00gY3VycmVuY3lfY29uZmlnIFdIRVJFIGN1cnJlbmN5X2lkID0gJHtjdXJyZW5jeV9uYW1lfWBcclxuICApO1xyXG4gIGF3YWl0IGRiLnJ1bihcclxuICAgIFNRTGBERUxFVEUgRlJPTSB1c2VyX2N1cnJlbmNpZXMgV0hFUkUgY3VycmVuY3lfaWQgPSAke2N1cnJlbmN5X25hbWV9YFxyXG4gICk7XHJcbiAgYXdhaXQgZGIucnVuKFxyXG4gICAgU1FMYERFTEVURSBGUk9NIHN0b3JlX2l0ZW1zIFdIRVJFIGN1cnJlbmN5X3JlcXVpcmVkID0gJHtjdXJyZW5jeV9uYW1lfWBcclxuICApO1xyXG4gIGF3YWl0IGRiLnJ1bihcclxuICAgIFNRTGBERUxFVEUgRlJPTSBzdG9yZV9pdGVtcyBXSEVSRSBjdXJyZW5jeV90b19naXZlID0gJHtjdXJyZW5jeV9uYW1lfWBcclxuICApO1xyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBlcnJvcl9pZl9leGlzdHMoY3VycmVuY3lfbmFtZTogc3RyaW5nKSB7XHJcbiAgaWYgKGF3YWl0IGRvZXNfY3VycmVuY3lfZXhpc3QoY3VycmVuY3lfbmFtZSkpXHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDdXJyZW5jeSBhbHJlYWR5IGV4aXN0c1wiKTtcclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gZXJyb3JfaWZfZG9lc250X2V4aXN0KGN1cnJlbmN5X25hbWU6IHN0cmluZykge1xyXG4gIGlmICghKGF3YWl0IGRvZXNfY3VycmVuY3lfZXhpc3QoY3VycmVuY3lfbmFtZSkpKVxyXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ3VycmVuY3kgZG9lcyBub3QgZXhpc3RcIik7XHJcbn1cclxuIl19