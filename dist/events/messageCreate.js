import { autogive_message, get_currency_balance, } from "../currency/operations/arithmetic.js";
import * as levelups from "../currency/operations/levelups.js";
import { add_user_xp, get_user_xp_multiplier, } from "../currency/operations/arithmetic.js";
import { minigames } from "../util/minigames.js";
import config from "../configs/config.json" with { type: "json" };
import { chance } from "../util/chance.js";
let minigame_cooldown = false;
let xp_cooldown = [];
export async function messageCreate(message) {
    if (!message.author.bot && !message.system) {
        give_user_currencies(message);
        if (message.channel.id === config.server.channels.chat)
            run_minigame_chance(message);
    }
}
async function give_user_currencies(message) {
    await autogive_message(message.author.id);
    const user_currencies = await get_currency_balance(message.author.id);
    if (levelups.monthly_rewards.checker(user_currencies["monthlymessages"]))
        await levelups.monthly_rewards.process(user_currencies["monthlymessages"], message);
    if (xp_cooldown.includes(message.author.id))
        return;
    let amount_to_add = 10 * (await get_user_xp_multiplier(message.author.id, message.channel.id));
    await add_user_xp(message.author.id, amount_to_add, message.channel);
    xp_cooldown.push(message.author.id);
    setTimeout(() => xp_cooldown.splice(xp_cooldown.indexOf(message.author.id, 1)), 30 * 1000);
}
function run_minigame_chance(message) {
    let probability = config.server.minigames.probability_per_message;
    if (!minigame_cooldown && chance(probability)) {
        let minigame = minigames[Object.keys(minigames)[Math.floor(Math.random() * Object.keys(minigames).length)]];
        minigame(message);
        minigame_cooldown = true;
        setTimeout(() => (minigame_cooldown = false), config.server.minigames.cooldown_ms);
    }
    return;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZUNyZWF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ldmVudHMvbWVzc2FnZUNyZWF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQ0wsZ0JBQWdCLEVBQ2hCLG9CQUFvQixHQUNyQixNQUFNLHNDQUFzQyxDQUFDO0FBQzlDLE9BQU8sS0FBSyxRQUFRLE1BQU0sb0NBQW9DLENBQUM7QUFDL0QsT0FBTyxFQUNMLFdBQVcsRUFDWCxzQkFBc0IsR0FDdkIsTUFBTSxzQ0FBc0MsQ0FBQztBQUM5QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDakQsT0FBTyxNQUFNLE1BQU0sd0JBQXdCLENBQUMsU0FBUyxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUM7QUFDcEUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRTNDLElBQUksaUJBQWlCLEdBQUcsS0FBSyxDQUFDO0FBQzlCLElBQUksV0FBVyxHQUFHLEVBQUUsQ0FBQztBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLGFBQWEsQ0FBQyxPQUF3QjtJQUMxRCxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDM0Msb0JBQW9CLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDOUIsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsS0FBSyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJO1lBQ3BELG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2pDLENBQUM7QUFDSCxDQUFDO0FBRUQsS0FBSyxVQUFVLG9CQUFvQixDQUFDLE9BQU87SUFDekMsTUFBTSxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzFDLE1BQU0sZUFBZSxHQUFHLE1BQU0sb0JBQW9CLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN0RSxJQUFJLFFBQVEsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ3RFLE1BQU0sUUFBUSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQ3BDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUNsQyxPQUFPLENBQ1IsQ0FBQztJQUdKLElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztRQUFFLE9BQU87SUFFcEQsSUFBSSxhQUFhLEdBQ2YsRUFBRSxHQUFHLENBQUMsTUFBTSxzQkFBc0IsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDN0UsTUFBTSxXQUFXLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsYUFBYSxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNyRSxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDcEMsVUFBVSxDQUNSLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNuRSxFQUFFLEdBQUcsSUFBSSxDQUNWLENBQUM7QUFDSixDQUFDO0FBRUQsU0FBUyxtQkFBbUIsQ0FBQyxPQUFPO0lBQ2xDLElBQUksV0FBVyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLHVCQUF1QixDQUFDO0lBQ2xFLElBQUksQ0FBQyxpQkFBaUIsSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQztRQUM5QyxJQUFJLFFBQVEsR0FDVixTQUFTLENBQ1AsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FDcEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FDMUQsQ0FDRixDQUFDO1FBQ0osUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2xCLGlCQUFpQixHQUFHLElBQUksQ0FBQztRQUN6QixVQUFVLENBQ1IsR0FBRyxFQUFFLENBQUMsQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUMsRUFDakMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUNwQyxDQUFDO0lBQ0osQ0FBQztJQUNELE9BQU87QUFDVCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgRGlzY29yZCBmcm9tIFwiZGlzY29yZC5qc1wiO1xyXG5pbXBvcnQge1xyXG4gIGF1dG9naXZlX21lc3NhZ2UsXHJcbiAgZ2V0X2N1cnJlbmN5X2JhbGFuY2UsXHJcbn0gZnJvbSBcIi4uL2N1cnJlbmN5L29wZXJhdGlvbnMvYXJpdGhtZXRpYy5qc1wiO1xyXG5pbXBvcnQgKiBhcyBsZXZlbHVwcyBmcm9tIFwiLi4vY3VycmVuY3kvb3BlcmF0aW9ucy9sZXZlbHVwcy5qc1wiO1xyXG5pbXBvcnQge1xyXG4gIGFkZF91c2VyX3hwLFxyXG4gIGdldF91c2VyX3hwX211bHRpcGxpZXIsXHJcbn0gZnJvbSBcIi4uL2N1cnJlbmN5L29wZXJhdGlvbnMvYXJpdGhtZXRpYy5qc1wiO1xyXG5pbXBvcnQgeyBtaW5pZ2FtZXMgfSBmcm9tIFwiLi4vdXRpbC9taW5pZ2FtZXMuanNcIjtcclxuaW1wb3J0IGNvbmZpZyBmcm9tIFwiLi4vY29uZmlncy9jb25maWcuanNvblwiIGFzc2VydCB7IHR5cGU6IFwianNvblwiIH07XHJcbmltcG9ydCB7IGNoYW5jZSB9IGZyb20gXCIuLi91dGlsL2NoYW5jZS5qc1wiO1xyXG5cclxubGV0IG1pbmlnYW1lX2Nvb2xkb3duID0gZmFsc2U7XHJcbmxldCB4cF9jb29sZG93biA9IFtdO1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWVzc2FnZUNyZWF0ZShtZXNzYWdlOiBEaXNjb3JkLk1lc3NhZ2UpIHtcclxuICBpZiAoIW1lc3NhZ2UuYXV0aG9yLmJvdCAmJiAhbWVzc2FnZS5zeXN0ZW0pIHtcclxuICAgIGdpdmVfdXNlcl9jdXJyZW5jaWVzKG1lc3NhZ2UpO1xyXG4gICAgaWYgKG1lc3NhZ2UuY2hhbm5lbC5pZCA9PT0gY29uZmlnLnNlcnZlci5jaGFubmVscy5jaGF0KVxyXG4gICAgICBydW5fbWluaWdhbWVfY2hhbmNlKG1lc3NhZ2UpO1xyXG4gIH1cclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gZ2l2ZV91c2VyX2N1cnJlbmNpZXMobWVzc2FnZSkge1xyXG4gIGF3YWl0IGF1dG9naXZlX21lc3NhZ2UobWVzc2FnZS5hdXRob3IuaWQpO1xyXG4gIGNvbnN0IHVzZXJfY3VycmVuY2llcyA9IGF3YWl0IGdldF9jdXJyZW5jeV9iYWxhbmNlKG1lc3NhZ2UuYXV0aG9yLmlkKTtcclxuICBpZiAobGV2ZWx1cHMubW9udGhseV9yZXdhcmRzLmNoZWNrZXIodXNlcl9jdXJyZW5jaWVzW1wibW9udGhseW1lc3NhZ2VzXCJdKSlcclxuICAgIGF3YWl0IGxldmVsdXBzLm1vbnRobHlfcmV3YXJkcy5wcm9jZXNzKFxyXG4gICAgICB1c2VyX2N1cnJlbmNpZXNbXCJtb250aGx5bWVzc2FnZXNcIl0sXHJcbiAgICAgIG1lc3NhZ2VcclxuICAgICk7XHJcblxyXG4gIC8vIFNwZWNpYWwgYmVoYXZpb3IgZm9yIFhQXHJcbiAgaWYgKHhwX2Nvb2xkb3duLmluY2x1ZGVzKG1lc3NhZ2UuYXV0aG9yLmlkKSkgcmV0dXJuO1xyXG5cclxuICBsZXQgYW1vdW50X3RvX2FkZCA9XHJcbiAgICAxMCAqIChhd2FpdCBnZXRfdXNlcl94cF9tdWx0aXBsaWVyKG1lc3NhZ2UuYXV0aG9yLmlkLCBtZXNzYWdlLmNoYW5uZWwuaWQpKTtcclxuICBhd2FpdCBhZGRfdXNlcl94cChtZXNzYWdlLmF1dGhvci5pZCwgYW1vdW50X3RvX2FkZCwgbWVzc2FnZS5jaGFubmVsKTtcclxuICB4cF9jb29sZG93bi5wdXNoKG1lc3NhZ2UuYXV0aG9yLmlkKTtcclxuICBzZXRUaW1lb3V0KFxyXG4gICAgKCkgPT4geHBfY29vbGRvd24uc3BsaWNlKHhwX2Nvb2xkb3duLmluZGV4T2YobWVzc2FnZS5hdXRob3IuaWQsIDEpKSxcclxuICAgIDMwICogMTAwMFxyXG4gICk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJ1bl9taW5pZ2FtZV9jaGFuY2UobWVzc2FnZSkge1xyXG4gIGxldCBwcm9iYWJpbGl0eSA9IGNvbmZpZy5zZXJ2ZXIubWluaWdhbWVzLnByb2JhYmlsaXR5X3Blcl9tZXNzYWdlO1xyXG4gIGlmICghbWluaWdhbWVfY29vbGRvd24gJiYgY2hhbmNlKHByb2JhYmlsaXR5KSkge1xyXG4gICAgbGV0IG1pbmlnYW1lID1cclxuICAgICAgbWluaWdhbWVzW1xyXG4gICAgICAgIE9iamVjdC5rZXlzKG1pbmlnYW1lcylbXHJcbiAgICAgICAgICBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBPYmplY3Qua2V5cyhtaW5pZ2FtZXMpLmxlbmd0aClcclxuICAgICAgICBdXHJcbiAgICAgIF07XHJcbiAgICBtaW5pZ2FtZShtZXNzYWdlKTtcclxuICAgIG1pbmlnYW1lX2Nvb2xkb3duID0gdHJ1ZTtcclxuICAgIHNldFRpbWVvdXQoXHJcbiAgICAgICgpID0+IChtaW5pZ2FtZV9jb29sZG93biA9IGZhbHNlKSxcclxuICAgICAgY29uZmlnLnNlcnZlci5taW5pZ2FtZXMuY29vbGRvd25fbXNcclxuICAgICk7XHJcbiAgfVxyXG4gIHJldHVybjtcclxufVxyXG4iXX0=