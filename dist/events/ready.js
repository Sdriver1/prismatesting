import "dotenv/config";
import { register_commands } from "../startup/commands.js";
import { client } from "../startup/client.js";
import config from "../configs/config.json" with { type: "json" };
import { db } from "../startup/db.js";
import SQL from "sql-template-strings";
import { add_currency, add_user_xp, } from "../currency/operations/arithmetic.js";
import { get_user_xp_multiplier } from "../currency/operations/arithmetic.js";
export async function ready() {
    register_commands();
    setInterval(async () => {
        const guild = await client.guilds.resolve(config.server.id).fetch();
        const voice_states = guild.voiceStates.cache.values();
        for (let voice_state of voice_states) {
            if (!voice_state.channel)
                return;
            if (!voice_state.member.user.bot &&
                voice_state.channel.members.filter((member) => !member.user.bot).size >
                    2) {
                add_user_xp(voice_state.member.id, 10 *
                    (await get_user_xp_multiplier(voice_state.member.id, voice_state.channel.id)), voice_state.channel);
                add_currency(voice_state.member.id, "Voice minutes this week", 1);
                add_currency(voice_state.member.id, "Voice minutes this month", 1);
                add_currency(voice_state.member.id, "Voice minutes", 1);
            }
        }
    }, 60 * 1000);
    setInterval(async () => {
        let boosts = await db.all(SQL `SELECT * from xp_boosts`);
        for (let boost of boosts) {
            if (boost.unclaimed_time_ms === 0 && boost.end_timestamp < Date.now())
                await db.run(`DELETE FROM xp_boosts WHERE id = ${boost.id}`);
        }
    }, 60 * 1000);
    setInterval(async () => {
        client.channels.resolve(config.server.channels.xp_logs).send({
            content: "Here's a copy of the database.",
            files: ["data/main.db"],
        });
    }, 60 * 60 * 1000);
    console.log("Ready!");
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhZHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZXZlbnRzL3JlYWR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzNELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUM5QyxPQUFPLE1BQU0sTUFBTSx3QkFBd0IsQ0FBQyxTQUFTLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQztBQUNwRSxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDdEMsT0FBTyxHQUFHLE1BQU0sc0JBQXNCLENBQUM7QUFDdkMsT0FBTyxFQUNMLFlBQVksRUFDWixXQUFXLEdBQ1osTUFBTSxzQ0FBc0MsQ0FBQztBQUM5QyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUc5RSxNQUFNLENBQUMsS0FBSyxVQUFVLEtBQUs7SUFDekIsaUJBQWlCLEVBQUUsQ0FBQztJQUVwQixXQUFXLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDckIsTUFBTSxLQUFLLEdBQUcsTUFBTSxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3BFLE1BQU0sWUFBWSxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ3RELEtBQUssSUFBSSxXQUFXLElBQUksWUFBWSxFQUFFLENBQUM7WUFDckMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPO2dCQUFFLE9BQU87WUFDakMsSUFDRSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUc7Z0JBQzVCLFdBQVcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUk7b0JBQ25FLENBQUMsRUFDSCxDQUFDO2dCQUNELFdBQVcsQ0FDVCxXQUFXLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFDckIsRUFBRTtvQkFDQSxDQUFDLE1BQU0sc0JBQXNCLENBQzNCLFdBQVcsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUNyQixXQUFXLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FDdkIsQ0FBQyxFQUNKLFdBQVcsQ0FBQyxPQUFPLENBQ3BCLENBQUM7Z0JBQ0YsWUFBWSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLHlCQUF5QixFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUNsRSxZQUFZLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsMEJBQTBCLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ25FLFlBQVksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxlQUFlLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDMUQsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQ2QsV0FBVyxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ3JCLElBQUksTUFBTSxHQUFHLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUEseUJBQXlCLENBQUMsQ0FBQztRQUN4RCxLQUFLLElBQUksS0FBSyxJQUFJLE1BQU0sRUFBRSxDQUFDO1lBQ3pCLElBQUksS0FBSyxDQUFDLGlCQUFpQixLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUU7Z0JBQ25FLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxvQ0FBb0MsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDakUsQ0FBQztJQUNILENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDZCxXQUFXLENBQ1QsS0FBSyxJQUFJLEVBQUU7UUFFUCxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FDckIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUVqQyxDQUFDLElBQUksQ0FBQztZQUNMLE9BQU8sRUFBRSxnQ0FBZ0M7WUFDekMsS0FBSyxFQUFFLENBQUMsY0FBYyxDQUFDO1NBQ3hCLENBQUMsQ0FBQztJQUNMLENBQUMsRUFDRCxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FDZixDQUFDO0lBQ0YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN4QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwiZG90ZW52L2NvbmZpZ1wiO1xyXG5pbXBvcnQgeyByZWdpc3Rlcl9jb21tYW5kcyB9IGZyb20gXCIuLi9zdGFydHVwL2NvbW1hbmRzLmpzXCI7XHJcbmltcG9ydCB7IGNsaWVudCB9IGZyb20gXCIuLi9zdGFydHVwL2NsaWVudC5qc1wiO1xyXG5pbXBvcnQgY29uZmlnIGZyb20gXCIuLi9jb25maWdzL2NvbmZpZy5qc29uXCIgYXNzZXJ0IHsgdHlwZTogXCJqc29uXCIgfTtcclxuaW1wb3J0IHsgZGIgfSBmcm9tIFwiLi4vc3RhcnR1cC9kYi5qc1wiO1xyXG5pbXBvcnQgU1FMIGZyb20gXCJzcWwtdGVtcGxhdGUtc3RyaW5nc1wiO1xyXG5pbXBvcnQge1xyXG4gIGFkZF9jdXJyZW5jeSxcclxuICBhZGRfdXNlcl94cCxcclxufSBmcm9tIFwiLi4vY3VycmVuY3kvb3BlcmF0aW9ucy9hcml0aG1ldGljLmpzXCI7XHJcbmltcG9ydCB7IGdldF91c2VyX3hwX211bHRpcGxpZXIgfSBmcm9tIFwiLi4vY3VycmVuY3kvb3BlcmF0aW9ucy9hcml0aG1ldGljLmpzXCI7XHJcbmltcG9ydCAqIGFzIERpc2NvcmQgZnJvbSBcImRpc2NvcmQuanNcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZWFkeSgpIHtcclxuICByZWdpc3Rlcl9jb21tYW5kcygpO1xyXG5cclxuICBzZXRJbnRlcnZhbChhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCBndWlsZCA9IGF3YWl0IGNsaWVudC5ndWlsZHMucmVzb2x2ZShjb25maWcuc2VydmVyLmlkKS5mZXRjaCgpO1xyXG4gICAgY29uc3Qgdm9pY2Vfc3RhdGVzID0gZ3VpbGQudm9pY2VTdGF0ZXMuY2FjaGUudmFsdWVzKCk7XHJcbiAgICBmb3IgKGxldCB2b2ljZV9zdGF0ZSBvZiB2b2ljZV9zdGF0ZXMpIHtcclxuICAgICAgaWYgKCF2b2ljZV9zdGF0ZS5jaGFubmVsKSByZXR1cm47XHJcbiAgICAgIGlmIChcclxuICAgICAgICAhdm9pY2Vfc3RhdGUubWVtYmVyLnVzZXIuYm90ICYmXHJcbiAgICAgICAgdm9pY2Vfc3RhdGUuY2hhbm5lbC5tZW1iZXJzLmZpbHRlcigobWVtYmVyKSA9PiAhbWVtYmVyLnVzZXIuYm90KS5zaXplID5cclxuICAgICAgICAgIDJcclxuICAgICAgKSB7XHJcbiAgICAgICAgYWRkX3VzZXJfeHAoXHJcbiAgICAgICAgICB2b2ljZV9zdGF0ZS5tZW1iZXIuaWQsXHJcbiAgICAgICAgICAxMCAqXHJcbiAgICAgICAgICAgIChhd2FpdCBnZXRfdXNlcl94cF9tdWx0aXBsaWVyKFxyXG4gICAgICAgICAgICAgIHZvaWNlX3N0YXRlLm1lbWJlci5pZCxcclxuICAgICAgICAgICAgICB2b2ljZV9zdGF0ZS5jaGFubmVsLmlkXHJcbiAgICAgICAgICAgICkpLFxyXG4gICAgICAgICAgdm9pY2Vfc3RhdGUuY2hhbm5lbFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgYWRkX2N1cnJlbmN5KHZvaWNlX3N0YXRlLm1lbWJlci5pZCwgXCJWb2ljZSBtaW51dGVzIHRoaXMgd2Vla1wiLCAxKTtcclxuICAgICAgICBhZGRfY3VycmVuY3kodm9pY2Vfc3RhdGUubWVtYmVyLmlkLCBcIlZvaWNlIG1pbnV0ZXMgdGhpcyBtb250aFwiLCAxKTtcclxuICAgICAgICBhZGRfY3VycmVuY3kodm9pY2Vfc3RhdGUubWVtYmVyLmlkLCBcIlZvaWNlIG1pbnV0ZXNcIiwgMSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9LCA2MCAqIDEwMDApO1xyXG4gIHNldEludGVydmFsKGFzeW5jICgpID0+IHtcclxuICAgIGxldCBib29zdHMgPSBhd2FpdCBkYi5hbGwoU1FMYFNFTEVDVCAqIGZyb20geHBfYm9vc3RzYCk7XHJcbiAgICBmb3IgKGxldCBib29zdCBvZiBib29zdHMpIHtcclxuICAgICAgaWYgKGJvb3N0LnVuY2xhaW1lZF90aW1lX21zID09PSAwICYmIGJvb3N0LmVuZF90aW1lc3RhbXAgPCBEYXRlLm5vdygpKVxyXG4gICAgICAgIGF3YWl0IGRiLnJ1bihgREVMRVRFIEZST00geHBfYm9vc3RzIFdIRVJFIGlkID0gJHtib29zdC5pZH1gKTtcclxuICAgIH1cclxuICB9LCA2MCAqIDEwMDApO1xyXG4gIHNldEludGVydmFsKFxyXG4gICAgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAoXHJcbiAgICAgICAgY2xpZW50LmNoYW5uZWxzLnJlc29sdmUoXHJcbiAgICAgICAgICBjb25maWcuc2VydmVyLmNoYW5uZWxzLnhwX2xvZ3NcclxuICAgICAgICApIGFzIERpc2NvcmQuVGV4dENoYW5uZWxcclxuICAgICAgKS5zZW5kKHtcclxuICAgICAgICBjb250ZW50OiBcIkhlcmUncyBhIGNvcHkgb2YgdGhlIGRhdGFiYXNlLlwiLFxyXG4gICAgICAgIGZpbGVzOiBbXCJkYXRhL21haW4uZGJcIl0sXHJcbiAgICAgIH0pO1xyXG4gICAgfSxcclxuICAgIDYwICogNjAgKiAxMDAwXHJcbiAgKTtcclxuICBjb25zb2xlLmxvZyhcIlJlYWR5IVwiKTtcclxufVxyXG4iXX0=