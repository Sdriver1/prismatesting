import { db } from "../startup/db.js";
import SQL from "sql-template-strings";
import config from "../configs/config.json" with { type: "json" };
export async function activate_boost(id, ms) {
    const boost = await db.get(SQL `SELECT * FROM xp_boosts WHERE id = ${id}`);
    if (!boost)
        throw new Error("Boost not found!");
    if (ms > boost.unclaimed_time_ms)
        throw new Error("You can't use a boost for longer than you have!");
    const current_timestamp = Date.now();
    const existing_end_timestamp = boost.end_timestamp;
    const new_end_timestamp = Math.max(existing_end_timestamp || 0, current_timestamp) + ms;
    await db.all(SQL `UPDATE xp_boosts SET unclaimed_time_ms = ${boost.unclaimed_time_ms - ms}, end_timestamp = ${new_end_timestamp} WHERE id = ${id}`);
}
export async function generate_multiplier_warning(attempted_multiplier, max_multiplier, show_boost_ad) {
    return (`### Woah there!
  ▸ After using this boost, your multiplier would be **${attempted_multiplier}x**, which exceeds the limit of **${max_multiplier}x**.
  ▸ While you can still use the boost, your multiplier won't go any higher than **${max_multiplier}x**, so it's probably not a good idea to use it now.` +
        (show_boost_ad
            ? `\n▸ If you were boosting, your maximum would be **${config.server.leveling.max_xp_boost_multipliers.boosters}x** XP!`
            : ``));
}
export async function get_available_boosts(user_id) {
    let boosts = await db.all(`SELECT * FROM xp_boosts WHERE owner_id = ${user_id}`);
    boosts = boosts.filter((boost) => boost.unclaimed_time_ms > 0 || boost.end_timestamp > Date.now());
    return boosts;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHBfYm9vc3RzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbW1hbmRfcGFydHMveHBfYm9vc3RzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUN0QyxPQUFPLEdBQUcsTUFBTSxzQkFBc0IsQ0FBQztBQUN2QyxPQUFPLE1BQU0sTUFBTSx3QkFBd0IsQ0FBQyxTQUFTLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQztBQVVwRSxNQUFNLENBQUMsS0FBSyxVQUFVLGNBQWMsQ0FBQyxFQUFVLEVBQUUsRUFBVTtJQUN6RCxNQUFNLEtBQUssR0FBRyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFBLHNDQUFzQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzFFLElBQUksQ0FBQyxLQUFLO1FBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQ2hELElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxpQkFBaUI7UUFDOUIsTUFBTSxJQUFJLEtBQUssQ0FBQyxpREFBaUQsQ0FBQyxDQUFDO0lBQ3JFLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3JDLE1BQU0sc0JBQXNCLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQztJQUNuRCxNQUFNLGlCQUFpQixHQUNyQixJQUFJLENBQUMsR0FBRyxDQUFDLHNCQUFzQixJQUFJLENBQUMsRUFBRSxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNoRSxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQ1YsR0FBRyxDQUFBLDRDQUNELEtBQUssQ0FBQyxpQkFBaUIsR0FBRyxFQUM1QixxQkFBcUIsaUJBQWlCLGVBQWUsRUFBRSxFQUFFLENBQzFELENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSwyQkFBMkIsQ0FDL0Msb0JBQTRCLEVBQzVCLGNBQXNCLEVBQ3RCLGFBQXNCO0lBRXRCLE9BQU8sQ0FDTDt5REFDcUQsb0JBQW9CLHFDQUFxQyxjQUFjO29GQUM1QyxjQUFjLHNEQUFzRDtRQUNwSixDQUFDLGFBQWE7WUFDWixDQUFDLENBQUMscURBQXFELE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLHdCQUF3QixDQUFDLFFBQVEsU0FBUztZQUN4SCxDQUFDLENBQUMsRUFBRSxDQUFDLENBQ1IsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLG9CQUFvQixDQUN4QyxPQUFlO0lBRWYsSUFBSSxNQUFNLEdBQUcsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUN2Qiw0Q0FBNEMsT0FBTyxFQUFFLENBQ3RELENBQUM7SUFDRixNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FDcEIsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsR0FBRyxDQUFDLElBQUksS0FBSyxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQzNFLENBQUM7SUFDRixPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGIgfSBmcm9tIFwiLi4vc3RhcnR1cC9kYi5qc1wiO1xyXG5pbXBvcnQgU1FMIGZyb20gXCJzcWwtdGVtcGxhdGUtc3RyaW5nc1wiO1xyXG5pbXBvcnQgY29uZmlnIGZyb20gXCIuLi9jb25maWdzL2NvbmZpZy5qc29uXCIgYXNzZXJ0IHsgdHlwZTogXCJqc29uXCIgfTtcclxuXHJcbmludGVyZmFjZSBYUEJvb3N0IHtcclxuICBtdWx0aXBsaWVyOiBudW1iZXI7XHJcbiAgdW5jbGFpbWVkX3RpbWVfbXM6IG51bWJlcjtcclxuICBvd25lcl9pZDogc3RyaW5nO1xyXG4gIGVuZF90aW1lc3RhbXA6IG51bWJlcjtcclxuICBpZDogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYWN0aXZhdGVfYm9vc3QoaWQ6IG51bWJlciwgbXM6IG51bWJlcikge1xyXG4gIGNvbnN0IGJvb3N0ID0gYXdhaXQgZGIuZ2V0KFNRTGBTRUxFQ1QgKiBGUk9NIHhwX2Jvb3N0cyBXSEVSRSBpZCA9ICR7aWR9YCk7XHJcbiAgaWYgKCFib29zdCkgdGhyb3cgbmV3IEVycm9yKFwiQm9vc3Qgbm90IGZvdW5kIVwiKTtcclxuICBpZiAobXMgPiBib29zdC51bmNsYWltZWRfdGltZV9tcylcclxuICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBjYW4ndCB1c2UgYSBib29zdCBmb3IgbG9uZ2VyIHRoYW4geW91IGhhdmUhXCIpO1xyXG4gIGNvbnN0IGN1cnJlbnRfdGltZXN0YW1wID0gRGF0ZS5ub3coKTtcclxuICBjb25zdCBleGlzdGluZ19lbmRfdGltZXN0YW1wID0gYm9vc3QuZW5kX3RpbWVzdGFtcDtcclxuICBjb25zdCBuZXdfZW5kX3RpbWVzdGFtcCA9XHJcbiAgICBNYXRoLm1heChleGlzdGluZ19lbmRfdGltZXN0YW1wIHx8IDAsIGN1cnJlbnRfdGltZXN0YW1wKSArIG1zO1xyXG4gIGF3YWl0IGRiLmFsbChcclxuICAgIFNRTGBVUERBVEUgeHBfYm9vc3RzIFNFVCB1bmNsYWltZWRfdGltZV9tcyA9ICR7XHJcbiAgICAgIGJvb3N0LnVuY2xhaW1lZF90aW1lX21zIC0gbXNcclxuICAgIH0sIGVuZF90aW1lc3RhbXAgPSAke25ld19lbmRfdGltZXN0YW1wfSBXSEVSRSBpZCA9ICR7aWR9YFxyXG4gICk7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZV9tdWx0aXBsaWVyX3dhcm5pbmcoXHJcbiAgYXR0ZW1wdGVkX211bHRpcGxpZXI6IG51bWJlcixcclxuICBtYXhfbXVsdGlwbGllcjogbnVtYmVyLFxyXG4gIHNob3dfYm9vc3RfYWQ6IGJvb2xlYW5cclxuKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICByZXR1cm4gKFxyXG4gICAgYCMjIyBXb2FoIHRoZXJlIVxyXG4gIOKWuCBBZnRlciB1c2luZyB0aGlzIGJvb3N0LCB5b3VyIG11bHRpcGxpZXIgd291bGQgYmUgKioke2F0dGVtcHRlZF9tdWx0aXBsaWVyfXgqKiwgd2hpY2ggZXhjZWVkcyB0aGUgbGltaXQgb2YgKioke21heF9tdWx0aXBsaWVyfXgqKi5cclxuICDilrggV2hpbGUgeW91IGNhbiBzdGlsbCB1c2UgdGhlIGJvb3N0LCB5b3VyIG11bHRpcGxpZXIgd29uJ3QgZ28gYW55IGhpZ2hlciB0aGFuICoqJHttYXhfbXVsdGlwbGllcn14KiosIHNvIGl0J3MgcHJvYmFibHkgbm90IGEgZ29vZCBpZGVhIHRvIHVzZSBpdCBub3cuYCArXHJcbiAgICAoc2hvd19ib29zdF9hZFxyXG4gICAgICA/IGBcXG7ilrggSWYgeW91IHdlcmUgYm9vc3RpbmcsIHlvdXIgbWF4aW11bSB3b3VsZCBiZSAqKiR7Y29uZmlnLnNlcnZlci5sZXZlbGluZy5tYXhfeHBfYm9vc3RfbXVsdGlwbGllcnMuYm9vc3RlcnN9eCoqIFhQIWBcclxuICAgICAgOiBgYClcclxuICApO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0X2F2YWlsYWJsZV9ib29zdHMoXHJcbiAgdXNlcl9pZDogc3RyaW5nXHJcbik6IFByb21pc2U8WFBCb29zdFtdPiB7XHJcbiAgbGV0IGJvb3N0cyA9IGF3YWl0IGRiLmFsbChcclxuICAgIGBTRUxFQ1QgKiBGUk9NIHhwX2Jvb3N0cyBXSEVSRSBvd25lcl9pZCA9ICR7dXNlcl9pZH1gXHJcbiAgKTtcclxuICBib29zdHMgPSBib29zdHMuZmlsdGVyKFxyXG4gICAgKGJvb3N0KSA9PiBib29zdC51bmNsYWltZWRfdGltZV9tcyA+IDAgfHwgYm9vc3QuZW5kX3RpbWVzdGFtcCA+IERhdGUubm93KClcclxuICApO1xyXG4gIHJldHVybiBib29zdHM7XHJcbn1cclxuIl19