import { get_store_item } from "../currency/operations/storeitems.js";
import { client } from "../startup/client.js";
import { automod } from "../util/automod.js";
import { get_currency_balance, add_currency, } from "../currency/operations/arithmetic.js";
import config from "../configs/config.json" with { type: "json" };
export async function buy_item(data) {
    const item = await get_store_item(data.item_name);
    if (!item)
        throw new Error("This item doesn't exist!");
    const user_balance = await get_currency_balance(data.buyer.id, item.currency_required);
    if (data.gift_message) {
        if (automod.scanners.contains_bad_words(data.gift_message))
            throw new Error("You can't send a gift with bad words!");
    }
    if (user_balance < item.price)
        throw new Error("You can't afford this item!");
    await add_currency(data.buyer.id, item.currency_required, -item.price, "Store item purchase");
    const recipient_user = data.gift_receiver ?? data.buyer;
    const recipient = client.guilds
        .resolve(config.server.id)
        .members.resolve(recipient_user);
    if (!item.currency_to_give &&
        !item.currency_to_give_amount &&
        recipient.roles.cache.has(item.role_to_give))
        throw new Error("The recipient already has this role!");
    if (item.role_to_give)
        recipient.roles.add(item.role_to_give);
    if (item.role_duration)
        setTimeout(() => recipient.roles.remove(item.role_to_give), item.role_duration);
    if (item.currency_to_give && item.currency_to_give_amount)
        await add_currency(recipient.id, item.currency_to_give, item.currency_to_give_amount, "Currency from store item purchase");
    if (data.gift_message)
        recipient
            .send(`# ${data.gift_anonymously ? "Someone anyonymously" : `<@${data.buyer.id}>`} gifted you in Prismatic! 
▸ Item sent to you: \`${item.item_name}\` 
${data.gift_message ? `▸ Gift message: ${data.gift_message}` : ""}
▸ [Go check it out](https://discord.gg/friendships)`)
            .catch((err) => { });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV5X2l0ZW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29tbWFuZF9wYXJ0cy9idXlfaXRlbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDdEUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUM3QyxPQUFPLEVBQ0wsb0JBQW9CLEVBQ3BCLFlBQVksR0FDYixNQUFNLHNDQUFzQyxDQUFDO0FBQzlDLE9BQU8sTUFBTSxNQUFNLHdCQUF3QixDQUFDLFNBQVMsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDO0FBVXBFLE1BQU0sQ0FBQyxLQUFLLFVBQVUsUUFBUSxDQUFDLElBQWU7SUFDNUMsTUFBTSxJQUFJLEdBQUcsTUFBTSxjQUFjLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ2xELElBQUksQ0FBQyxJQUFJO1FBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0lBQ3ZELE1BQU0sWUFBWSxHQUFHLE1BQU0sb0JBQW9CLENBQzdDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUNiLElBQUksQ0FBQyxpQkFBaUIsQ0FDdkIsQ0FBQztJQUNGLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3RCLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDO1lBQ3hELE1BQU0sSUFBSSxLQUFLLENBQUMsdUNBQXVDLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBQ0QsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDLEtBQUs7UUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLDZCQUE2QixDQUFDLENBQUM7SUFFOUUsTUFBTSxZQUFZLENBQ2hCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUNiLElBQUksQ0FBQyxpQkFBaUIsRUFDdEIsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUNYLHFCQUFxQixDQUN0QixDQUFDO0lBRUYsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3hELE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxNQUFNO1NBQzVCLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztTQUN6QixPQUFPLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ25DLElBQ0UsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCO1FBQ3RCLENBQUMsSUFBSSxDQUFDLHVCQUF1QjtRQUM3QixTQUFTLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQztRQUU1QyxNQUFNLElBQUksS0FBSyxDQUFDLHNDQUFzQyxDQUFDLENBQUM7SUFFMUQsSUFBSSxJQUFJLENBQUMsWUFBWTtRQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUM5RCxJQUFJLElBQUksQ0FBQyxhQUFhO1FBQ3BCLFVBQVUsQ0FDUixHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQy9DLElBQUksQ0FBQyxhQUFhLENBQ25CLENBQUM7SUFDSixJQUFJLElBQUksQ0FBQyxnQkFBZ0IsSUFBSSxJQUFJLENBQUMsdUJBQXVCO1FBQ3ZELE1BQU0sWUFBWSxDQUNoQixTQUFTLENBQUMsRUFBRSxFQUNaLElBQUksQ0FBQyxnQkFBZ0IsRUFDckIsSUFBSSxDQUFDLHVCQUF1QixFQUM1QixtQ0FBbUMsQ0FDcEMsQ0FBQztJQUNKLElBQUksSUFBSSxDQUFDLFlBQVk7UUFDbkIsU0FBUzthQUNOLElBQUksQ0FDSCxLQUNFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQ3JFO3dCQUNnQixJQUFJLENBQUMsU0FBUztFQUNwQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFO29EQUNiLENBQzdDO2FBQ0EsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsR0FBRSxDQUFDLENBQUMsQ0FBQztBQUMxQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgRGlzY29yZCBmcm9tIFwiZGlzY29yZC5qc1wiO1xyXG5pbXBvcnQgeyBnZXRfc3RvcmVfaXRlbSB9IGZyb20gXCIuLi9jdXJyZW5jeS9vcGVyYXRpb25zL3N0b3JlaXRlbXMuanNcIjtcclxuaW1wb3J0IHsgY2xpZW50IH0gZnJvbSBcIi4uL3N0YXJ0dXAvY2xpZW50LmpzXCI7XHJcbmltcG9ydCB7IGF1dG9tb2QgfSBmcm9tIFwiLi4vdXRpbC9hdXRvbW9kLmpzXCI7XHJcbmltcG9ydCB7XHJcbiAgZ2V0X2N1cnJlbmN5X2JhbGFuY2UsXHJcbiAgYWRkX2N1cnJlbmN5LFxyXG59IGZyb20gXCIuLi9jdXJyZW5jeS9vcGVyYXRpb25zL2FyaXRobWV0aWMuanNcIjtcclxuaW1wb3J0IGNvbmZpZyBmcm9tIFwiLi4vY29uZmlncy9jb25maWcuanNvblwiIGFzc2VydCB7IHR5cGU6IFwianNvblwiIH07XHJcblxyXG5pbnRlcmZhY2UgQnV5ZXJEYXRhIHtcclxuICBidXllcjogRGlzY29yZC5Vc2VyO1xyXG4gIGl0ZW1fbmFtZTogc3RyaW5nO1xyXG4gIGdpZnRfYW5vbnltb3VzbHk/OiBib29sZWFuO1xyXG4gIGdpZnRfcmVjZWl2ZXI/OiBEaXNjb3JkLlVzZXI7XHJcbiAgZ2lmdF9tZXNzYWdlPzogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYnV5X2l0ZW0oZGF0YTogQnV5ZXJEYXRhKSB7XHJcbiAgY29uc3QgaXRlbSA9IGF3YWl0IGdldF9zdG9yZV9pdGVtKGRhdGEuaXRlbV9uYW1lKTtcclxuICBpZiAoIWl0ZW0pIHRocm93IG5ldyBFcnJvcihcIlRoaXMgaXRlbSBkb2Vzbid0IGV4aXN0IVwiKTtcclxuICBjb25zdCB1c2VyX2JhbGFuY2UgPSBhd2FpdCBnZXRfY3VycmVuY3lfYmFsYW5jZShcclxuICAgIGRhdGEuYnV5ZXIuaWQsXHJcbiAgICBpdGVtLmN1cnJlbmN5X3JlcXVpcmVkXHJcbiAgKTtcclxuICBpZiAoZGF0YS5naWZ0X21lc3NhZ2UpIHtcclxuICAgIGlmIChhdXRvbW9kLnNjYW5uZXJzLmNvbnRhaW5zX2JhZF93b3JkcyhkYXRhLmdpZnRfbWVzc2FnZSkpXHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBjYW4ndCBzZW5kIGEgZ2lmdCB3aXRoIGJhZCB3b3JkcyFcIik7XHJcbiAgfVxyXG4gIGlmICh1c2VyX2JhbGFuY2UgPCBpdGVtLnByaWNlKSB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgY2FuJ3QgYWZmb3JkIHRoaXMgaXRlbSFcIik7XHJcblxyXG4gIGF3YWl0IGFkZF9jdXJyZW5jeShcclxuICAgIGRhdGEuYnV5ZXIuaWQsXHJcbiAgICBpdGVtLmN1cnJlbmN5X3JlcXVpcmVkLFxyXG4gICAgLWl0ZW0ucHJpY2UsXHJcbiAgICBcIlN0b3JlIGl0ZW0gcHVyY2hhc2VcIlxyXG4gICk7XHJcblxyXG4gIGNvbnN0IHJlY2lwaWVudF91c2VyID0gZGF0YS5naWZ0X3JlY2VpdmVyID8/IGRhdGEuYnV5ZXI7XHJcbiAgY29uc3QgcmVjaXBpZW50ID0gY2xpZW50Lmd1aWxkc1xyXG4gICAgLnJlc29sdmUoY29uZmlnLnNlcnZlci5pZClcclxuICAgIC5tZW1iZXJzLnJlc29sdmUocmVjaXBpZW50X3VzZXIpO1xyXG4gIGlmIChcclxuICAgICFpdGVtLmN1cnJlbmN5X3RvX2dpdmUgJiZcclxuICAgICFpdGVtLmN1cnJlbmN5X3RvX2dpdmVfYW1vdW50ICYmXHJcbiAgICByZWNpcGllbnQucm9sZXMuY2FjaGUuaGFzKGl0ZW0ucm9sZV90b19naXZlKVxyXG4gIClcclxuICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSByZWNpcGllbnQgYWxyZWFkeSBoYXMgdGhpcyByb2xlIVwiKTtcclxuXHJcbiAgaWYgKGl0ZW0ucm9sZV90b19naXZlKSByZWNpcGllbnQucm9sZXMuYWRkKGl0ZW0ucm9sZV90b19naXZlKTtcclxuICBpZiAoaXRlbS5yb2xlX2R1cmF0aW9uKVxyXG4gICAgc2V0VGltZW91dChcclxuICAgICAgKCkgPT4gcmVjaXBpZW50LnJvbGVzLnJlbW92ZShpdGVtLnJvbGVfdG9fZ2l2ZSksXHJcbiAgICAgIGl0ZW0ucm9sZV9kdXJhdGlvblxyXG4gICAgKTtcclxuICBpZiAoaXRlbS5jdXJyZW5jeV90b19naXZlICYmIGl0ZW0uY3VycmVuY3lfdG9fZ2l2ZV9hbW91bnQpXHJcbiAgICBhd2FpdCBhZGRfY3VycmVuY3koXHJcbiAgICAgIHJlY2lwaWVudC5pZCxcclxuICAgICAgaXRlbS5jdXJyZW5jeV90b19naXZlLFxyXG4gICAgICBpdGVtLmN1cnJlbmN5X3RvX2dpdmVfYW1vdW50LFxyXG4gICAgICBcIkN1cnJlbmN5IGZyb20gc3RvcmUgaXRlbSBwdXJjaGFzZVwiXHJcbiAgICApO1xyXG4gIGlmIChkYXRhLmdpZnRfbWVzc2FnZSlcclxuICAgIHJlY2lwaWVudFxyXG4gICAgICAuc2VuZChcclxuICAgICAgICBgIyAke1xyXG4gICAgICAgICAgZGF0YS5naWZ0X2Fub255bW91c2x5ID8gXCJTb21lb25lIGFueW9ueW1vdXNseVwiIDogYDxAJHtkYXRhLmJ1eWVyLmlkfT5gXHJcbiAgICAgICAgfSBnaWZ0ZWQgeW91IGluIFByaXNtYXRpYyEgXHJcbuKWuCBJdGVtIHNlbnQgdG8geW91OiBcXGAke2l0ZW0uaXRlbV9uYW1lfVxcYCBcclxuJHtkYXRhLmdpZnRfbWVzc2FnZSA/IGDilrggR2lmdCBtZXNzYWdlOiAke2RhdGEuZ2lmdF9tZXNzYWdlfWAgOiBcIlwifVxyXG7ilrggW0dvIGNoZWNrIGl0IG91dF0oaHR0cHM6Ly9kaXNjb3JkLmdnL2ZyaWVuZHNoaXBzKWBcclxuICAgICAgKVxyXG4gICAgICAuY2F0Y2goKGVycikgPT4ge30pO1xyXG59XHJcbiJdfQ==