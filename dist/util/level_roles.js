import config from "../configs/config.json" with { type: "json" };
import { client } from "../startup/client.js";
import { get_currency_balance } from "../currency/operations/arithmetic.js";
import { level } from "../currency/configurers/leveling/formula.js";
export function get_level_role(level, level_role_array) {
    const eligible_roles = level_role_array.filter(([level_required]) => level >= level_required);
    const max_level = Math.max(...eligible_roles.map(([level_required]) => level_required));
    const highest_eligible_role = eligible_roles.find(([level_required]) => level_required === max_level);
    if (highest_eligible_role)
        return highest_eligible_role[1];
    else
        return undefined;
}
export async function update_user_level_roles(user_id, level_role_array) {
    const guild = client.guilds.resolve(config.server.id);
    const member = guild.members.resolve(user_id);
    const xp = await get_currency_balance(member.id, "xp");
    const member_level = level(xp);
    const level_role_ids = level_role_array.map(([, roleid]) => roleid);
    await member.roles.remove(level_role_ids);
    const member_level_role = get_level_role(member_level, level_role_array);
    if (member_level_role)
        await member.roles.add(member_level_role);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGV2ZWxfcm9sZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbC9sZXZlbF9yb2xlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLE1BQU0sTUFBTSx3QkFBd0IsQ0FBQyxTQUFTLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQztBQUNwRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDOUMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDNUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBVXBFLE1BQU0sVUFBVSxjQUFjLENBQUMsS0FBYSxFQUFFLGdCQUF1QjtJQUNuRSxNQUFNLGNBQWMsR0FBRyxnQkFBZ0IsQ0FBQyxNQUFNLENBQzVDLENBQUMsQ0FBQyxjQUFjLENBQUMsRUFBRSxFQUFFLENBQUMsS0FBSyxJQUFJLGNBQWMsQ0FDOUMsQ0FBQztJQUNGLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQ3hCLEdBQUcsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLEVBQUUsRUFBRSxDQUFDLGNBQWMsQ0FBQyxDQUM1RCxDQUFDO0lBQ0YsTUFBTSxxQkFBcUIsR0FBRyxjQUFjLENBQUMsSUFBSSxDQUMvQyxDQUFDLENBQUMsY0FBYyxDQUFDLEVBQUUsRUFBRSxDQUFDLGNBQWMsS0FBSyxTQUFTLENBQ25ELENBQUM7SUFDRixJQUFJLHFCQUFxQjtRQUFFLE9BQU8scUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUM7O1FBQ3RELE9BQU8sU0FBUyxDQUFDO0FBQ3hCLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLHVCQUF1QixDQUMzQyxPQUFlLEVBQ2YsZ0JBQXVCO0lBRXZCLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdEQsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDOUMsTUFBTSxFQUFFLEdBQUcsTUFBTSxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3ZELE1BQU0sWUFBWSxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMvQixNQUFNLGNBQWMsR0FBRyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3BFLE1BQU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDMUMsTUFBTSxpQkFBaUIsR0FBRyxjQUFjLENBQUMsWUFBWSxFQUFFLGdCQUFnQixDQUFDLENBQUM7SUFDekUsSUFBSSxpQkFBaUI7UUFBRSxNQUFNLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFDbkUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb25maWcgZnJvbSBcIi4uL2NvbmZpZ3MvY29uZmlnLmpzb25cIiBhc3NlcnQgeyB0eXBlOiBcImpzb25cIiB9O1xyXG5pbXBvcnQgeyBjbGllbnQgfSBmcm9tIFwiLi4vc3RhcnR1cC9jbGllbnQuanNcIjtcclxuaW1wb3J0IHsgZ2V0X2N1cnJlbmN5X2JhbGFuY2UgfSBmcm9tIFwiLi4vY3VycmVuY3kvb3BlcmF0aW9ucy9hcml0aG1ldGljLmpzXCI7XHJcbmltcG9ydCB7IGxldmVsIH0gZnJvbSBcIi4uL2N1cnJlbmN5L2NvbmZpZ3VyZXJzL2xldmVsaW5nL2Zvcm11bGEuanNcIjtcclxuXHJcbi8qIFVzZWQgZ2VuZXJhbGx5IGZvciBsZXZlbCBhbmQgcGVyc3RpZ2Ugcm9sZXMuXHJcblxyXG5Bc3N1bWVzIHRoZSBhcnJheSB0YWtlcyB0aGUgZm9ybWF0IFtbbGV2ZWxfYSwgcm9sZWlkX2FdLCBbbGV2ZWxfYiwgcm9sZWlkX2JdXS5cclxuR2l2ZW4gbGV2ZWwsIGZpbmRzIHRoZSByb2xlaWQgY29ycmVzcG9uZGluZyB0byB0aGUgbGV2ZWwgPD0gdGhlIGxldmVsIHByb3ZpZGVkIHRvIHRoZSBmdW5jdGlvbiB3aGVyZSBubyBoaWdoZXIgbGV2ZWwgZXhpc3RzIHRoYXQgc2F0aXNmaWVzIHRoaXMgY29uZGl0aW9uLlxyXG5cclxuVGhpcyBmdW5jdGlvbiBtYXkgb3V0cHV0IHVudXN1YWwgcmVzdWx0cyBpZiB0aGUgYXJyYXkgaXNuJ3Qgb3JkZXJlZC5cclxuKi9cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRfbGV2ZWxfcm9sZShsZXZlbDogbnVtYmVyLCBsZXZlbF9yb2xlX2FycmF5OiBhbnlbXSkge1xyXG4gIGNvbnN0IGVsaWdpYmxlX3JvbGVzID0gbGV2ZWxfcm9sZV9hcnJheS5maWx0ZXIoXHJcbiAgICAoW2xldmVsX3JlcXVpcmVkXSkgPT4gbGV2ZWwgPj0gbGV2ZWxfcmVxdWlyZWRcclxuICApO1xyXG4gIGNvbnN0IG1heF9sZXZlbCA9IE1hdGgubWF4KFxyXG4gICAgLi4uZWxpZ2libGVfcm9sZXMubWFwKChbbGV2ZWxfcmVxdWlyZWRdKSA9PiBsZXZlbF9yZXF1aXJlZClcclxuICApO1xyXG4gIGNvbnN0IGhpZ2hlc3RfZWxpZ2libGVfcm9sZSA9IGVsaWdpYmxlX3JvbGVzLmZpbmQoXHJcbiAgICAoW2xldmVsX3JlcXVpcmVkXSkgPT4gbGV2ZWxfcmVxdWlyZWQgPT09IG1heF9sZXZlbFxyXG4gICk7XHJcbiAgaWYgKGhpZ2hlc3RfZWxpZ2libGVfcm9sZSkgcmV0dXJuIGhpZ2hlc3RfZWxpZ2libGVfcm9sZVsxXTtcclxuICBlbHNlIHJldHVybiB1bmRlZmluZWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVfdXNlcl9sZXZlbF9yb2xlcyhcclxuICB1c2VyX2lkOiBzdHJpbmcsXHJcbiAgbGV2ZWxfcm9sZV9hcnJheTogYW55W11cclxuKSB7XHJcbiAgY29uc3QgZ3VpbGQgPSBjbGllbnQuZ3VpbGRzLnJlc29sdmUoY29uZmlnLnNlcnZlci5pZCk7XHJcbiAgY29uc3QgbWVtYmVyID0gZ3VpbGQubWVtYmVycy5yZXNvbHZlKHVzZXJfaWQpO1xyXG4gIGNvbnN0IHhwID0gYXdhaXQgZ2V0X2N1cnJlbmN5X2JhbGFuY2UobWVtYmVyLmlkLCBcInhwXCIpO1xyXG4gIGNvbnN0IG1lbWJlcl9sZXZlbCA9IGxldmVsKHhwKTtcclxuICBjb25zdCBsZXZlbF9yb2xlX2lkcyA9IGxldmVsX3JvbGVfYXJyYXkubWFwKChbLCByb2xlaWRdKSA9PiByb2xlaWQpO1xyXG4gIGF3YWl0IG1lbWJlci5yb2xlcy5yZW1vdmUobGV2ZWxfcm9sZV9pZHMpO1xyXG4gIGNvbnN0IG1lbWJlcl9sZXZlbF9yb2xlID0gZ2V0X2xldmVsX3JvbGUobWVtYmVyX2xldmVsLCBsZXZlbF9yb2xlX2FycmF5KTtcclxuICBpZiAobWVtYmVyX2xldmVsX3JvbGUpIGF3YWl0IG1lbWJlci5yb2xlcy5hZGQobWVtYmVyX2xldmVsX3JvbGUpO1xyXG59XHJcbiJdfQ==